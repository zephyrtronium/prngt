package main

import (
	"math/big"
	"math/rand"
	"strconv"
)

const popcountN = 1000000

var i2_p64 = new(big.Int).SetBit(new(big.Int), 64, 1)
var binomialBitDist [63]*big.Rat

func init() {
	bitCombinations := [63]int64{64, 2016, 41664, 635376, 7624512, 74974368, 621216192, 4426165368, 27540584512, 151473214816, 743595781824, 3284214703056, 13136858812224, 47855699958816, 159518999862720, 488526937079580, 1379370175283520, 3601688791018080, 8719878125622720, 19619725782651120, 41107996877935680, 80347448443237920, 146721427591999680, 250649105469666120, 401038568751465792, 601557853127198688, 846636978475316672, 1118770292985239888, 1388818294740297792, 1620288010530347424, 1777090076065542336, 1832624140942590534, 1777090076065542336, 1620288010530347424, 1388818294740297792, 1118770292985239888, 846636978475316672, 601557853127198688, 401038568751465792, 250649105469666120, 146721427591999680, 80347448443237920, 41107996877935680, 19619725782651120, 8719878125622720, 3601688791018080, 1379370175283520, 488526937079580, 159518999862720, 47855699958816, 13136858812224, 3284214703056, 743595781824, 151473214816, 27540584512, 4426165368, 621216192, 74974368, 7624512, 635376, 41664, 2016, 64}
	for i, v := range bitCombinations {
		binomialBitDist[i] = new(big.Rat).SetFrac(big.NewInt(v), i2_p64)
	}
}

// The probability that k out of n random integers have popcount x follows a
// binomial distribution.
func Popcount(r rand.Source) float64 {
	counts := [63]int64{}
	for i := 0; i < popcountN; i++ {
		x := r.Int63()
		// popcount_3() from http://en.wikipedia.org/wiki/Hamming_weight
		x -= x >> 1 & 0x5555555555555555
		x = x&0x3333333333333333 + x>>2&0x3333333333333333
		x = (x + x>>4) & 0x0f0f0f0f0f0f0f0f
		x = x * 0x0101010101010101 >> 56 // popcount
		counts[x]++
	}
	sum := new(big.Rat)
	variance := new(big.Rat)
	for i, v := range counts {
		p := new(big.Rat).SetFrac(new(big.Int).Binomial(64, v), i2_p64)
		sum.Add(sum, p)
		p.Sub(p, binomialBitDist[i])
		variance.Add(variance, p.Mul(p, p))
	}
	D, _ := strconv.ParseFloat(variance.Mul(variance, sum.Inv(sum)).FloatString(50), 64)
	return D
}
