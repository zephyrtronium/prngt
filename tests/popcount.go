package tests

import (
	"math/big"
	"math/rand"
	"strconv"
)

const popcountN = 2000000

var i2_p64 = new(big.Int).SetBit(new(big.Int), 64, 1)
var binomialBitDist [63]*big.Rat

func init() {
	bitCombinations := [63]int64{63, 1953, 39711, 595665, 7028847, 67945521, 553270671, 3872894697, 23667689815, 127805525001, 615790256823, 2668424446233, 10468434365991, 37387265592825, 122131734269895, 366395202809685, 1012974972473835, 2588713818544245, 6131164307078475, 13488561475572645, 27619435402363035, 52728013040874885, 93993414551124795, 156655690918541325, 244382877832924467, 357174975294274221, 489462003181042451, 629308289804197437, 759510004936100355, 860778005594247069, 916312070471295267, 916312070471295267, 860778005594247069, 759510004936100355, 629308289804197437, 489462003181042451, 357174975294274221, 244382877832924467, 156655690918541325, 93993414551124795, 52728013040874885, 27619435402363035, 13488561475572645, 6131164307078475, 2588713818544245, 1012974972473835, 366395202809685, 122131734269895, 37387265592825, 10468434365991, 2668424446233, 615790256823, 127805525001, 23667689815, 3872894697, 553270671, 67945521, 7028847, 595665, 39711, 1953, 63}
	for i, v := range bitCombinations {
		binomialBitDist[i] = new(big.Rat).SetFrac(big.NewInt(v), i2_p64)
	}
}

// The probability that k out of n random integers have popcount x follows a
// binomial distribution.
func Popcount(r rand.Source) float64 {
	counts := [63]int64{}
	for i := 0; i < popcountN; i++ {
		x := r.Int63()
		// popcount_3() from http://en.wikipedia.org/wiki/Hamming_weight
		x -= x >> 1 & 0x5555555555555555
		x = x&0x3333333333333333 + x>>2&0x3333333333333333
		x = (x + x>>4) & 0x0f0f0f0f0f0f0f0f
		x = x * 0x0101010101010101 >> 56 // popcount
		counts[x]++
	}
	sum := new(big.Rat)
	variance := new(big.Rat)
	for i, v := range counts {
		p := new(big.Rat).SetFrac(new(big.Int).Binomial(64, v), i2_p64)
		sum.Add(sum, p)
		p.Sub(p, binomialBitDist[i])
		variance.Add(variance, p.Mul(p, p))
	}
	D, _ := strconv.ParseFloat(variance.Mul(variance, sum.Inv(sum)).FloatString(50), 64)
	return D
}
