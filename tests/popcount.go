package tests

import "math/rand"

const popcountN = 2000000

const binomialBitScale = 1.0842021724855044e-19
var binomialBitPMF = [64]float64{1.0842021724855044e-19, 6.830473686658678e-18, 2.1174468428641902e-16, 4.305475247157187e-15, 6.45821287073578e-14, 7.62069118746822e-13, 7.366668147885946e-12, 5.998572634707128e-11, 4.1990008442949894e-10, 2.5660560715136047e-09, 1.3856702786173465e-08, 6.676411342429033e-08, 2.8931115817192477e-07, 1.1349899282129356e-06, 4.053535457903342e-06, 1.324154916248425e-05, 3.972464748745275e-05, 0.0001098269665829576, 0.00028066891460089163, 0.0006647421661600065, 0.0014624327655520142, 0.0029945051866065056, 0.005716782628976056, 0.010190786425566013, 0.01698464404261002, 0.026496044706471635, 0.03872498841715085, 0.05306757671979931, 0.06822974149688482, 0.08234623973761962, 0.09332573836930223, 0.09934675374796689, 0.09934675374796689, 0.09332573836930223, 0.08234623973761962, 0.06822974149688482, 0.05306757671979931, 0.03872498841715085, 0.026496044706471635, 0.01698464404261002, 0.010190786425566013, 0.005716782628976056, 0.0029945051866065056, 0.0014624327655520142, 0.0006647421661600065, 0.00028066891460089163, 0.0001098269665829576, 3.972464748745275e-05, 1.324154916248425e-05, 4.053535457903342e-06, 1.1349899282129356e-06, 2.8931115817192477e-07, 6.676411342429033e-08, 1.3856702786173465e-08, 2.5660560715136047e-09, 4.1990008442949894e-10, 5.998572634707128e-11, 7.366668147885946e-12, 7.62069118746822e-13, 6.45821287073578e-14, 4.305475247157187e-15, 2.1174468428641902e-16, 6.830473686658678e-18, 1.0842021724855044e-19}

// The probability that k out of n random integers have popcount x follows a
// binomial distribution.
func Popcount(r rand.Source) float64 {
	counts := [64]int64{}
	for i := 0; i < popcountN; i++ {
		x := r.Int63()
		// popcount_3() from http://en.wikipedia.org/wiki/Hamming_weight
		x -= x >> 1 & 0x5555555555555555
		x = x&0x3333333333333333 + x>>2&0x3333333333333333
		x = (x + x>>4) & 0x0f0f0f0f0f0f0f0f
		x = x * 0x0101010101010101 >> 56 // popcount
		counts[x]++
	}
	var chi2 float64
	for i, v := range counts {
		d := float64(v)*binomialBitScale - binomialBitPMF[i]
		chi2 += d*d / binomialBitPMF[i]
	}
	println(chi2)
	return 1 - LowerGamma(30, chi2/2)*1.13099628864477e-31
}
